---
swagger: "2.0"
info:
  description: "Backup Service OpenAPI"
  version: "v0.0.0-master+$Format:%h$"
  title: "Backup Service"
  contact:
    name: "Jibudata"
    url: "https://www.jibudata.com"
    email: "shaofeng@jibudata.com"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  /jibuapis/ys.jibudata.com/v1alpha1/backupplans:
    get:
      tags:
      - "BackupPlanTag"
      summary: "List all backupplans"
      operationId: "ListAllBackupPlans"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupPlanList"
  /jibuapis/ys.jibudata.com/v1alpha1/clusters:
    get:
      tags:
      - "Cluster"
      summary: "List all clusters."
      operationId: "ListAllClusters"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.ClusterList"
  /jibuapis/ys.jibudata.com/v1alpha1/restoreplans:
    get:
      tags:
      - "RestorePlanTag"
      summary: "List all restoreplans."
      operationId: "ListAllRestorePlans"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestorePlanList"
  /jibuapis/ys.jibudata.com/v1alpha1/storages:
    get:
      tags:
      - "Storage"
      summary: "List all storages."
      operationId: "ListAllStorages"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.StorageList"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants:
    get:
      tags:
      - "Tenant"
      summary: "List all tenants"
      operationId: "ListTenants"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.TenantList"
    post:
      tags:
      - "Tenant"
      summary: "Create a tenant."
      operationId: "CreateTenant"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.Tenant"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Tenant"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}:
    get:
      tags:
      - "Tenant"
      summary: "Retrieve tenant details."
      operationId: "GetTenant"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant ID"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Tenant"
    put:
      tags:
      - "Tenant"
      summary: "Update a tenant"
      operationId: "UpdateTenant"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant ID"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.Tenant"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Tenant"
    delete:
      tags:
      - "Tenant"
      summary: "Delete a tenant."
      operationId: "DeleteTenant"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant ID"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/backupjobs:
    get:
      tags:
      - "BackupJobTag"
      summary: "List backupjobs of a tenant, or under a backup plan"
      operationId: "ListBackupJobs"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "plan_name"
        in: "query"
        description: "backup plan name"
        required: false
        type: "string"
        x-exportParamName: "PlanName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupJobList"
    post:
      tags:
      - "BackupJobTag"
      summary: "Create a backupjob for a tenant."
      operationId: "CreateBackupJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.BackupJob"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupJob"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/backupjobs/{backupjob}:
    get:
      tags:
      - "BackupJobTag"
      summary: "Retrieve backupjob details."
      operationId: "GetBackupJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "backupjob"
        in: "path"
        description: "backupjob name"
        required: true
        type: "string"
        x-exportParamName: "Backupjob"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupJob"
    put:
      tags:
      - "BackupJobTag"
      summary: "Update a backupjob for a tenant."
      operationId: "UpdateBackupJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "backupjob"
        in: "path"
        description: "backupjob name"
        required: true
        type: "string"
        x-exportParamName: "Backupjob"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.BackupJob"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupJob"
    delete:
      tags:
      - "BackupJobTag"
      summary: "Delete a backupjob for a tenant."
      operationId: "DeleteBackupJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "backupjob"
        in: "path"
        description: "backupjob name"
        required: true
        type: "string"
        x-exportParamName: "Backupjob"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/backupplans:
    get:
      tags:
      - "BackupPlanTag"
      summary: "List all backupplans of a tenant"
      operationId: "ListBackupPlans"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupPlanList"
    post:
      tags:
      - "BackupPlanTag"
      summary: "Create a backupplan."
      operationId: "CreateBackupPlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.BackupPlan"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupPlan"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/backupplans/{backupplan}:
    get:
      tags:
      - "BackupPlanTag"
      summary: "Retrieve backupplan details."
      operationId: "GetBackupPlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "backupplan"
        in: "path"
        description: "backupplan name"
        required: true
        type: "string"
        x-exportParamName: "Backupplan"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupPlan"
    put:
      tags:
      - "BackupPlanTag"
      summary: "Update backupplan details."
      operationId: "UpdateBackupPlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "backupplan"
        in: "path"
        description: "backupplan name"
        required: true
        type: "string"
        x-exportParamName: "Backupplan"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.BackupPlan"
    delete:
      tags:
      - "BackupPlanTag"
      summary: "Delete a backupplan."
      operationId: "DeleteBackupPlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "backupplan"
        in: "path"
        description: "backupplan name"
        required: true
        type: "string"
        x-exportParamName: "Backupplan"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/clusters:
    get:
      tags:
      - "Cluster"
      summary: "List all clusters of a tenant."
      operationId: "ListClusters"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.ClusterList"
    post:
      tags:
      - "Cluster"
      summary: "Create a cluster."
      operationId: "CreateCluster"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.Cluster"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Cluster"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/clusters/{cluster}:
    get:
      tags:
      - "Cluster"
      summary: "Retrieve storage details."
      operationId: "GetCluster"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "cluster"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "Cluster"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Cluster"
    put:
      tags:
      - "Cluster"
      summary: "Update a cluster."
      operationId: "UpdateCluster"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "cluster"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "Cluster"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.Cluster"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Cluster"
    delete:
      tags:
      - "Cluster"
      summary: "Delete a cluster."
      operationId: "DeleteCluster"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "cluster"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "Cluster"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/clusters/{cluster}/resources/namespaces:
    get:
      tags:
      - "Cluster"
      summary: "Get namespaces in a cluster"
      operationId: "GetNamespaces"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "cluster"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "Cluster"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1.NamespaceList"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/restorejobs:
    get:
      tags:
      - "RestoreJobTag"
      summary: "List all restorejobs of a tenant"
      operationId: "ListRestoreJobs"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "plan_name"
        in: "query"
        description: "restore plan name"
        required: false
        type: "string"
        x-exportParamName: "PlanName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestoreJobList"
    post:
      tags:
      - "RestoreJobTag"
      summary: "Create a restorejob for a tenant."
      operationId: "CreateRestoreJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.RestoreJob"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestoreJob"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/restorejobs/{restorejob}:
    get:
      tags:
      - "RestoreJobTag"
      summary: "Retrieve restorejob details."
      operationId: "GetRestoreJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "restorejob"
        in: "path"
        description: "restorejob name"
        required: true
        type: "string"
        x-exportParamName: "Restorejob"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestoreJob"
    put:
      tags:
      - "RestoreJobTag"
      summary: "Update a restorejob for a tenant."
      operationId: "UpdateRestoreJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "restorejob"
        in: "path"
        description: "restorejob name"
        required: true
        type: "string"
        x-exportParamName: "Restorejob"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.RestoreJob"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestoreJob"
    delete:
      tags:
      - "RestoreJobTag"
      summary: "Delete a restorejob for a tenant."
      operationId: "DeleteRestoreJob"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "restorejob"
        in: "path"
        description: "restorejob name"
        required: true
        type: "string"
        x-exportParamName: "Restorejob"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/restoreplans:
    get:
      tags:
      - "RestorePlanTag"
      summary: "List all restoreplans of a tenant"
      operationId: "ListRestorePlans"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestorePlanList"
    post:
      tags:
      - "RestorePlanTag"
      summary: "Create a restoreplan."
      operationId: "CreateRestorePlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.RestorePlan"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestorePlan"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/restoreplans/{restoreplan}:
    get:
      tags:
      - "RestorePlanTag"
      summary: "Retrieve restoreplan details."
      operationId: "GetRestorePlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "restoreplan"
        in: "path"
        description: "restoreplan name"
        required: true
        type: "string"
        x-exportParamName: "Restoreplan"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestorePlan"
    put:
      tags:
      - "RestorePlanTag"
      summary: "Update restoreplan details."
      operationId: "UpdateRestorePlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "restoreplan"
        in: "path"
        description: "restoreplan name"
        required: true
        type: "string"
        x-exportParamName: "Restoreplan"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.RestorePlan"
    delete:
      tags:
      - "RestorePlanTag"
      summary: "Delete a restoreplan."
      operationId: "DeleteRestorePlan"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "restoreplan"
        in: "path"
        description: "restoreplan name"
        required: true
        type: "string"
        x-exportParamName: "Restoreplan"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/storages:
    get:
      tags:
      - "Storage"
      summary: "List all storages of a tenant."
      operationId: "ListStorages"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.StorageList"
    post:
      tags:
      - "Storage"
      summary: "Create a storage."
      operationId: "CreateStorage"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.Storage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Storage"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/storages/{storage}:
    get:
      tags:
      - "Storage"
      summary: "Retrieve storage details."
      operationId: "GetStorage"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "storage"
        in: "path"
        description: "storage name"
        required: true
        type: "string"
        x-exportParamName: "Storage"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Storage"
    put:
      tags:
      - "Storage"
      summary: "Update a storage"
      operationId: "UpdateStorage"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "storage"
        in: "path"
        description: "storage name"
        required: true
        type: "string"
        x-exportParamName: "Storage"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1.Storage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/v1alpha1.Storage"
    delete:
      tags:
      - "Storage"
      summary: "Delete a storage."
      operationId: "DeleteStorage"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "storage"
        in: "path"
        description: "storage name"
        required: true
        type: "string"
        x-exportParamName: "Storage"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
  /jibuapis/ys.jibudata.com/v1alpha1/tenants/{tenant}/storages/{storage}/credentials:
    post:
      tags:
      - "Storage"
      summary: "Create a credential for a storage."
      operationId: "CreateStorageCredentials"
      produces:
      - "application/json"
      parameters:
      - name: "tenant"
        in: "path"
        description: "tenant id"
        required: true
        type: "string"
        x-exportParamName: "Tenant"
      - name: "storage"
        in: "path"
        description: "storage name"
        required: true
        type: "string"
        x-exportParamName: "Storage"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1.Secret"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "ok"
          schema:
            $ref: "#/definitions/ysapi.Error"
definitions:
  v1.ListMeta:
    properties:
      continue:
        type: "string"
        description: "continue may be set if the user set a limit on the number of\
          \ items returned, and indicates that the server has more data available.\
          \ The value is opaque and may be used to issue another request to the endpoint\
          \ that served this list to retrieve the next set of available objects. Continuing\
          \ a consistent list may not be possible if the server configuration has\
          \ changed or more than a few minutes have passed. The resourceVersion field\
          \ returned when using this continue value will be identical to the value\
          \ in the first response, unless you have received this token from an error\
          \ message."
      remainingItemCount:
        type: "integer"
        format: "int64"
        description: "remainingItemCount is the number of subsequent items in the\
          \ list which are not included in this list response. If the list request\
          \ contained label or field selectors, then the number of remaining items\
          \ is unknown and the field will be left unset and omitted during serialization.\
          \ If the list is complete (either because it is not chunking or because\
          \ this is the last chunk), then there are no more remaining items and this\
          \ field will be left unset and omitted during serialization. Servers older\
          \ than v1.15 do not set this field. The intended use of the remainingItemCount\
          \ is *estimating* the size of a collection. Clients should not rely on the\
          \ remainingItemCount to be set or to be exact."
      resourceVersion:
        type: "string"
        description: "String that identifies the server's internal version of this\
          \ object that can be used by clients to determine when objects have changed.\
          \ Value must be treated as opaque by clients and passed unmodified back\
          \ to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
      selfLink:
        type: "string"
        description: "selfLink is a URL representing this object. Populated by the\
          \ system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this\
          \ field in 1.20 release and the field is planned to be removed in 1.21 release."
    description: "ListMeta describes metadata that synthetic resources must have,\
      \ including lists and various status objects. A resource may have only one of\
      \ {ObjectMeta, ListMeta}."
    example:
      remainingItemCount: 5
      continue: "continue"
      resourceVersion: "resourceVersion"
      selfLink: "selfLink"
  v1.ManagedFieldsEntry:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the version of this resource that this field\
          \ set applies to. The format is \"group/version\" just like the top-level\
          \ APIVersion field. It is necessary to track the version of a field set\
          \ because it cannot be automatically converted."
      fieldsType:
        type: "string"
        description: "FieldsType is the discriminator for the different fields format\
          \ and version. There is currently only one possible value: \"FieldsV1\""
      fieldsV1:
        type: "string"
        description: "FieldsV1 holds the first JSON version format as described in\
          \ the \"FieldsV1\" type."
      manager:
        type: "string"
        description: "Manager is an identifier of the workflow managing these fields."
      operation:
        type: "string"
        description: "Operation is the type of operation which lead to this ManagedFieldsEntry\
          \ being created. The only valid values for this field are 'Apply' and 'Update'."
      time:
        type: "string"
        description: "Time is timestamp of when these fields were set. It should always\
          \ be empty if Operation is 'Apply'"
    description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version\
      \ of the resource that the fieldset applies to."
    example:
      apiVersion: "apiVersion"
      fieldsV1: "fieldsV1"
      manager: "manager"
      time: "time"
      operation: "operation"
      fieldsType: "fieldsType"
  v1.Namespace:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        description: "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        $ref: "#/definitions/v1.NamespaceSpec"
      status:
        description: "Status describes the current status of a Namespace. More info:\
          \ https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        $ref: "#/definitions/v1.NamespaceStatus"
    description: "Namespace provides a scope for Names. Use of multiple namespaces\
      \ is optional."
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        finalizers:
        - "finalizers"
        - "finalizers"
      status:
        phase: "phase"
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1.NamespaceCondition:
    required:
    - "status"
    - "type"
    properties:
      lastTransitionTime:
        type: "string"
      message:
        type: "string"
      reason:
        type: "string"
      status:
        type: "string"
        description: "Status of the condition, one of True, False, Unknown."
      type:
        type: "string"
        description: "Type of namespace controller condition."
    description: "NamespaceCondition contains details about state of namespace."
    example:
      reason: "reason"
      lastTransitionTime: "lastTransitionTime"
      message: "message"
      type: "type"
      status: "status"
  v1.NamespaceList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        description: "Items is the list of Namespace objects in the list. More info:\
          \ https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        items:
          $ref: "#/definitions/v1.Namespace"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        $ref: "#/definitions/v1.ListMeta"
    description: "NamespaceList is a list of Namespaces."
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          finalizers:
          - "finalizers"
          - "finalizers"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          finalizers:
          - "finalizers"
          - "finalizers"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1.NamespaceSpec:
    properties:
      finalizers:
        type: "array"
        description: "Finalizers is an opaque list of values that must be empty to\
          \ permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
        items:
          type: "string"
    description: "NamespaceSpec describes the attributes on a Namespace."
    example:
      finalizers:
      - "finalizers"
      - "finalizers"
  v1.NamespaceStatus:
    properties:
      conditions:
        type: "array"
        description: "Represents the latest available observations of a namespace's\
          \ current state."
        items:
          $ref: "#/definitions/v1.NamespaceCondition"
      phase:
        type: "string"
        description: "Phase is the current lifecycle phase of the namespace. More\
          \ info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
    description: "NamespaceStatus is information about the current status of a Namespace."
    example:
      phase: "phase"
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1.ObjectMeta:
    properties:
      annotations:
        type: "object"
        description: "Annotations is an unstructured key value map stored with a resource\
          \ that may be set by external tools to store and retrieve arbitrary metadata.\
          \ They are not queryable and should be preserved when modifying objects.\
          \ More info: http://kubernetes.io/docs/user-guide/annotations"
        additionalProperties:
          type: "string"
      clusterName:
        type: "string"
        description: "The name of the cluster which the object belongs to. This is\
          \ used to distinguish resources with same name and namespace in different\
          \ clusters. This field is not set anywhere right now and apiserver is going\
          \ to ignore it if set in create or update request."
      creationTimestamp:
        type: "string"
        description: "CreationTimestamp is a timestamp representing the server time\
          \ when this object was created. It is not guaranteed to be set in happens-before\
          \ order across separate operations. Clients may not set this value. It is\
          \ represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\
          \ Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
      deletionGracePeriodSeconds:
        type: "integer"
        format: "int64"
        description: "Number of seconds allowed for this object to gracefully terminate\
          \ before it will be removed from the system. Only set when deletionTimestamp\
          \ is also set. May only be shortened. Read-only."
      deletionTimestamp:
        type: "string"
        description: "DeletionTimestamp is RFC 3339 date and time at which this resource\
          \ will be deleted. This field is set by the server when a graceful deletion\
          \ is requested by the user, and is not directly settable by a client. The\
          \ resource is expected to be deleted (no longer visible from resource lists,\
          \ and not reachable by name) after the time in this field, once the finalizers\
          \ list is empty. As long as the finalizers list contains items, deletion\
          \ is blocked. Once the deletionTimestamp is set, this value may not be unset\
          \ or be set further into the future, although it may be shortened or the\
          \ resource may be deleted prior to this time. For example, a user may request\
          \ that a pod is deleted in 30 seconds. The Kubelet will react by sending\
          \ a graceful termination signal to the containers in the pod. After that\
          \ 30 seconds, the Kubelet will send a hard termination signal (SIGKILL)\
          \ to the container and after cleanup, remove the pod from the API. In the\
          \ presence of network partitions, this object may still exist after this\
          \ timestamp, until an administrator or automated process can determine the\
          \ resource is fully terminated. If not set, graceful deletion of the object\
          \ has not been requested.\n\nPopulated by the system when a graceful deletion\
          \ is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
      finalizers:
        type: "array"
        description: "Must be empty before the object is deleted from the registry.\
          \ Each entry is an identifier for the responsible component that will remove\
          \ the entry from the list. If the deletionTimestamp of the object is non-nil,\
          \ entries in this list can only be removed. Finalizers may be processed\
          \ and removed in any order.  Order is NOT enforced because it introduces\
          \ significant risk of stuck finalizers. finalizers is a shared field, any\
          \ actor with permission can reorder it. If the finalizer list is processed\
          \ in order, then this can lead to a situation in which the component responsible\
          \ for the first finalizer in the list is waiting for a signal (field value,\
          \ external system, or other) produced by a component responsible for a finalizer\
          \ later in the list, resulting in a deadlock. Without enforced ordering\
          \ finalizers are free to order amongst themselves and are not vulnerable\
          \ to ordering changes in the list."
        items:
          type: "string"
      generateName:
        type: "string"
        description: "GenerateName is an optional prefix, used by the server, to generate\
          \ a unique name ONLY IF the Name field has not been provided. If this field\
          \ is used, the name returned to the client will be different than the name\
          \ passed. This value will also be combined with a unique suffix. The provided\
          \ value has the same validation rules as the Name field, and may be truncated\
          \ by the length of the suffix required to make the value unique on the server.\n\
          \nIf this field is specified and the generated name exists, the server will\
          \ NOT return a 409 - instead, it will either return 201 Created or 500 with\
          \ Reason ServerTimeout indicating a unique name could not be found in the\
          \ time allotted, and the client should retry (optionally after the time\
          \ indicated in the Retry-After header).\n\nApplied only if Name is not specified.\
          \ More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
      generation:
        type: "integer"
        format: "int64"
        description: "A sequence number representing a specific generation of the\
          \ desired state. Populated by the system. Read-only."
      labels:
        type: "object"
        description: "Map of string keys and values that can be used to organize and\
          \ categorize (scope and select) objects. May match selectors of replication\
          \ controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        additionalProperties:
          type: "string"
      managedFields:
        type: "array"
        description: "ManagedFields maps workflow-id and version to the set of fields\
          \ that are managed by that workflow. This is mostly for internal housekeeping,\
          \ and users typically shouldn't need to set or understand this field. A\
          \ workflow can be the user's name, a controller's name, or the name of a\
          \ specific apply path like \"ci-cd\". The set of fields is always in the\
          \ version that the workflow used when modifying the object."
        items:
          $ref: "#/definitions/v1.ManagedFieldsEntry"
      name:
        type: "string"
        description: "Name must be unique within a namespace. Is required when creating\
          \ resources, although some resources may allow a client to request the generation\
          \ of an appropriate name automatically. Name is primarily intended for creation\
          \ idempotence and configuration definition. Cannot be updated. More info:\
          \ http://kubernetes.io/docs/user-guide/identifiers#names"
      namespace:
        type: "string"
        description: "Namespace defines the space within which each name must be unique.\
          \ An empty namespace is equivalent to the \"default\" namespace, but \"\
          default\" is the canonical representation. Not all objects are required\
          \ to be scoped to a namespace - the value of this field for those objects\
          \ will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
      ownerReferences:
        type: "array"
        description: "List of objects depended by this object. If ALL objects in the\
          \ list have been deleted, this object will be garbage collected. If this\
          \ object is managed by a controller, then an entry in this list will point\
          \ to this controller, with the controller field set to true. There cannot\
          \ be more than one managing controller."
        items:
          $ref: "#/definitions/v1.OwnerReference"
      resourceVersion:
        type: "string"
        description: "An opaque value that represents the internal version of this\
          \ object that can be used by clients to determine when objects have changed.\
          \ May be used for optimistic concurrency, change detection, and the watch\
          \ operation on a resource or set of resources. Clients must treat these\
          \ values as opaque and passed unmodified back to the server. They may only\
          \ be valid for a particular resource or set of resources.\n\nPopulated by\
          \ the system. Read-only. Value must be treated as opaque by clients and\
          \ . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
      selfLink:
        type: "string"
        description: "SelfLink is a URL representing this object. Populated by the\
          \ system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this\
          \ field in 1.20 release and the field is planned to be removed in 1.21 release."
      uid:
        type: "string"
        description: "UID is the unique in time and space value for this object. It\
          \ is typically generated by the server on successful creation of a resource\
          \ and is not allowed to change on PUT operations.\n\nPopulated by the system.\
          \ Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
    description: "ObjectMeta is metadata that all persisted resources must have, which\
      \ includes all objects users must create."
    example:
      generation: 6
      finalizers:
      - "finalizers"
      - "finalizers"
      resourceVersion: "resourceVersion"
      annotations:
        key: "annotations"
      generateName: "generateName"
      deletionTimestamp: "deletionTimestamp"
      labels:
        key: "labels"
      ownerReferences:
      - uid: "uid"
        controller: true
        apiVersion: "apiVersion"
        kind: "kind"
        name: "name"
        blockOwnerDeletion: true
      - uid: "uid"
        controller: true
        apiVersion: "apiVersion"
        kind: "kind"
        name: "name"
        blockOwnerDeletion: true
      selfLink: "selfLink"
      deletionGracePeriodSeconds: 0
      uid: "uid"
      managedFields:
      - apiVersion: "apiVersion"
        fieldsV1: "fieldsV1"
        manager: "manager"
        time: "time"
        operation: "operation"
        fieldsType: "fieldsType"
      - apiVersion: "apiVersion"
        fieldsV1: "fieldsV1"
        manager: "manager"
        time: "time"
        operation: "operation"
        fieldsType: "fieldsType"
      clusterName: "clusterName"
      creationTimestamp: "creationTimestamp"
      name: "name"
      namespace: "namespace"
  v1.OwnerReference:
    required:
    - "apiVersion"
    - "kind"
    - "name"
    - "uid"
    properties:
      apiVersion:
        type: "string"
        description: "API version of the referent."
      blockOwnerDeletion:
        type: "boolean"
        description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer,\
          \ then the owner cannot be deleted from the key-value store until this reference\
          \ is removed. Defaults to false. To set this field, a user needs \"delete\"\
          \ permission of the owner, otherwise 422 (Unprocessable Entity) will be\
          \ returned."
      controller:
        type: "boolean"
        description: "If true, this reference points to the managing controller."
      kind:
        type: "string"
        description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      name:
        type: "string"
        description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
      uid:
        type: "string"
        description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
    description: "OwnerReference contains enough information to let you identify an\
      \ owning object. An owning object must be in the same namespace as the dependent,\
      \ or be cluster-scoped, so there is no namespace field."
    example:
      uid: "uid"
      controller: true
      apiVersion: "apiVersion"
      kind: "kind"
      name: "name"
      blockOwnerDeletion: true
  v1.Secret:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      data:
        type: "object"
        description: "Data contains the secret data. Each key must consist of alphanumeric\
          \ characters, '-', '_' or '.'. The serialized form of the secret data is\
          \ a base64 encoded string, representing the arbitrary (possibly non-string)\
          \ data value here. Described in https://tools.ietf.org/html/rfc4648#section-4"
        additionalProperties:
          type: "string"
      immutable:
        type: "boolean"
        description: "Immutable, if set to true, ensures that data stored in the Secret\
          \ cannot be updated (only object metadata can be modified). If not set to\
          \ true, the field can be modified at any time. Defaulted to nil. This is\
          \ a beta field enabled by ImmutableEphemeralVolumes feature gate."
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        $ref: "#/definitions/v1.ObjectMeta"
      stringData:
        type: "object"
        description: "stringData allows specifying non-binary secret data in string\
          \ form. It is provided as a write-only convenience method. All keys and\
          \ values are merged into the data field on write, overwriting any existing\
          \ values. It is never output when reading from the API."
        additionalProperties:
          type: "string"
      type:
        type: "string"
        description: "Used to facilitate programmatic handling of secret data."
    description: "Secret holds secret data of a certain type. The total bytes of the\
      \ values in the Data field must be less than MaxSecretSize bytes."
  v1alpha1.BackupJob:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.BackupJobSpec"
      status:
        $ref: "#/definitions/v1alpha1.BackupJobStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        backupPlanRef:
          excludePV: true
          storageRef:
            isDefaultStorage: true
            volumeSnapshotProvider: "volumeSnapshotProvider"
            displayName: "displayName"
            s3Config:
              accessKeyId: "accessKeyId"
              bucket: "bucket"
              secretAccessKey: "secretAccessKey"
              s3url: "s3url"
              insecure: true
              credsSecretName: "credsSecretName"
              region: "region"
            volumeSnapshotConfig:
              credsSecretName: "credsSecretName"
              region: "region"
            tenant: "tenant"
            desc: "desc"
            s3Provider: "s3Provider"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          copyMethod: "copyMethod"
          displayName: "displayName"
          clusterName: "clusterName"
          includedResources:
          - "includedResources"
          - "includedResources"
          tenant: "tenant"
          desc: "desc"
          namespaces:
          - "namespaces"
          - "namespaces"
          policy:
            displayName: "displayName"
            repeat: true
            name: "name"
            retention: 5
            desc: "desc"
            frequency: 1
          storageName: "storageName"
        displayName: "displayName"
        action: "action"
        backupName: "backupName"
        tenant: "tenant"
        desc: "desc"
      status:
        phase: "phase"
        report:
          submitTime: "submitTime"
          startTime: "startTime"
          endTime: "endTime"
          expiredTime: "expiredTime"
          totalPVC: 0
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1alpha1.BackupJobList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.BackupJob"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          backupPlanRef:
            excludePV: true
            storageRef:
              isDefaultStorage: true
              volumeSnapshotProvider: "volumeSnapshotProvider"
              displayName: "displayName"
              s3Config:
                accessKeyId: "accessKeyId"
                bucket: "bucket"
                secretAccessKey: "secretAccessKey"
                s3url: "s3url"
                insecure: true
                credsSecretName: "credsSecretName"
                region: "region"
              volumeSnapshotConfig:
                credsSecretName: "credsSecretName"
                region: "region"
              tenant: "tenant"
              desc: "desc"
              s3Provider: "s3Provider"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            copyMethod: "copyMethod"
            displayName: "displayName"
            clusterName: "clusterName"
            includedResources:
            - "includedResources"
            - "includedResources"
            tenant: "tenant"
            desc: "desc"
            namespaces:
            - "namespaces"
            - "namespaces"
            policy:
              displayName: "displayName"
              repeat: true
              name: "name"
              retention: 5
              desc: "desc"
              frequency: 1
            storageName: "storageName"
          displayName: "displayName"
          action: "action"
          backupName: "backupName"
          tenant: "tenant"
          desc: "desc"
        status:
          phase: "phase"
          report:
            submitTime: "submitTime"
            startTime: "startTime"
            endTime: "endTime"
            expiredTime: "expiredTime"
            totalPVC: 0
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          backupPlanRef:
            excludePV: true
            storageRef:
              isDefaultStorage: true
              volumeSnapshotProvider: "volumeSnapshotProvider"
              displayName: "displayName"
              s3Config:
                accessKeyId: "accessKeyId"
                bucket: "bucket"
                secretAccessKey: "secretAccessKey"
                s3url: "s3url"
                insecure: true
                credsSecretName: "credsSecretName"
                region: "region"
              volumeSnapshotConfig:
                credsSecretName: "credsSecretName"
                region: "region"
              tenant: "tenant"
              desc: "desc"
              s3Provider: "s3Provider"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            copyMethod: "copyMethod"
            displayName: "displayName"
            clusterName: "clusterName"
            includedResources:
            - "includedResources"
            - "includedResources"
            tenant: "tenant"
            desc: "desc"
            namespaces:
            - "namespaces"
            - "namespaces"
            policy:
              displayName: "displayName"
              repeat: true
              name: "name"
              retention: 5
              desc: "desc"
              frequency: 1
            storageName: "storageName"
          displayName: "displayName"
          action: "action"
          backupName: "backupName"
          tenant: "tenant"
          desc: "desc"
        status:
          phase: "phase"
          report:
            submitTime: "submitTime"
            startTime: "startTime"
            endTime: "endTime"
            expiredTime: "expiredTime"
            totalPVC: 0
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1alpha1.BackupJobReport:
    properties:
      endTime:
        type: "string"
      expiredTime:
        type: "string"
      startTime:
        type: "string"
      submitTime:
        type: "string"
      totalPVC:
        type: "integer"
        format: "integer"
    example:
      submitTime: "submitTime"
      startTime: "startTime"
      endTime: "endTime"
      expiredTime: "expiredTime"
      totalPVC: 0
  v1alpha1.BackupJobSpec:
    required:
    - "backupName"
    - "tenant"
    properties:
      action:
        type: "string"
      backupName:
        type: "string"
      backupPlanRef:
        $ref: "#/definitions/v1alpha1.BackupPlanSpec"
      desc:
        type: "string"
      displayName:
        type: "string"
      tenant:
        type: "string"
    example:
      backupPlanRef:
        excludePV: true
        storageRef:
          isDefaultStorage: true
          volumeSnapshotProvider: "volumeSnapshotProvider"
          displayName: "displayName"
          s3Config:
            accessKeyId: "accessKeyId"
            bucket: "bucket"
            secretAccessKey: "secretAccessKey"
            s3url: "s3url"
            insecure: true
            credsSecretName: "credsSecretName"
            region: "region"
          volumeSnapshotConfig:
            credsSecretName: "credsSecretName"
            region: "region"
          tenant: "tenant"
          desc: "desc"
          s3Provider: "s3Provider"
        excludedResources:
        - "excludedResources"
        - "excludedResources"
        copyMethod: "copyMethod"
        displayName: "displayName"
        clusterName: "clusterName"
        includedResources:
        - "includedResources"
        - "includedResources"
        tenant: "tenant"
        desc: "desc"
        namespaces:
        - "namespaces"
        - "namespaces"
        policy:
          displayName: "displayName"
          repeat: true
          name: "name"
          retention: 5
          desc: "desc"
          frequency: 1
        storageName: "storageName"
      displayName: "displayName"
      action: "action"
      backupName: "backupName"
      tenant: "tenant"
      desc: "desc"
  v1alpha1.BackupJobStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      phase:
        type: "string"
      report:
        $ref: "#/definitions/v1alpha1.BackupJobReport"
    example:
      phase: "phase"
      report:
        submitTime: "submitTime"
        startTime: "startTime"
        endTime: "endTime"
        expiredTime: "expiredTime"
        totalPVC: 0
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1alpha1.BackupPlan:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.BackupPlanSpec"
      status:
        $ref: "#/definitions/v1alpha1.BackupPlanStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        excludePV: true
        storageRef:
          isDefaultStorage: true
          volumeSnapshotProvider: "volumeSnapshotProvider"
          displayName: "displayName"
          s3Config:
            accessKeyId: "accessKeyId"
            bucket: "bucket"
            secretAccessKey: "secretAccessKey"
            s3url: "s3url"
            insecure: true
            credsSecretName: "credsSecretName"
            region: "region"
          volumeSnapshotConfig:
            credsSecretName: "credsSecretName"
            region: "region"
          tenant: "tenant"
          desc: "desc"
          s3Provider: "s3Provider"
        excludedResources:
        - "excludedResources"
        - "excludedResources"
        copyMethod: "copyMethod"
        displayName: "displayName"
        clusterName: "clusterName"
        includedResources:
        - "includedResources"
        - "includedResources"
        tenant: "tenant"
        desc: "desc"
        namespaces:
        - "namespaces"
        - "namespaces"
        policy:
          displayName: "displayName"
          repeat: true
          name: "name"
          retention: 5
          desc: "desc"
          frequency: 1
        storageName: "storageName"
      status:
        phase: "phase"
        currentJobPhase: "currentJobPhase"
        jobDetail:
          key: "jobDetail"
        currentJobName: "currentJobName"
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1alpha1.BackupPlanList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.BackupPlan"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          excludePV: true
          storageRef:
            isDefaultStorage: true
            volumeSnapshotProvider: "volumeSnapshotProvider"
            displayName: "displayName"
            s3Config:
              accessKeyId: "accessKeyId"
              bucket: "bucket"
              secretAccessKey: "secretAccessKey"
              s3url: "s3url"
              insecure: true
              credsSecretName: "credsSecretName"
              region: "region"
            volumeSnapshotConfig:
              credsSecretName: "credsSecretName"
              region: "region"
            tenant: "tenant"
            desc: "desc"
            s3Provider: "s3Provider"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          copyMethod: "copyMethod"
          displayName: "displayName"
          clusterName: "clusterName"
          includedResources:
          - "includedResources"
          - "includedResources"
          tenant: "tenant"
          desc: "desc"
          namespaces:
          - "namespaces"
          - "namespaces"
          policy:
            displayName: "displayName"
            repeat: true
            name: "name"
            retention: 5
            desc: "desc"
            frequency: 1
          storageName: "storageName"
        status:
          phase: "phase"
          currentJobPhase: "currentJobPhase"
          jobDetail:
            key: "jobDetail"
          currentJobName: "currentJobName"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          excludePV: true
          storageRef:
            isDefaultStorage: true
            volumeSnapshotProvider: "volumeSnapshotProvider"
            displayName: "displayName"
            s3Config:
              accessKeyId: "accessKeyId"
              bucket: "bucket"
              secretAccessKey: "secretAccessKey"
              s3url: "s3url"
              insecure: true
              credsSecretName: "credsSecretName"
              region: "region"
            volumeSnapshotConfig:
              credsSecretName: "credsSecretName"
              region: "region"
            tenant: "tenant"
            desc: "desc"
            s3Provider: "s3Provider"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          copyMethod: "copyMethod"
          displayName: "displayName"
          clusterName: "clusterName"
          includedResources:
          - "includedResources"
          - "includedResources"
          tenant: "tenant"
          desc: "desc"
          namespaces:
          - "namespaces"
          - "namespaces"
          policy:
            displayName: "displayName"
            repeat: true
            name: "name"
            retention: 5
            desc: "desc"
            frequency: 1
          storageName: "storageName"
        status:
          phase: "phase"
          currentJobPhase: "currentJobPhase"
          jobDetail:
            key: "jobDetail"
          currentJobName: "currentJobName"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1alpha1.BackupPlanSpec:
    required:
    - "clusterName"
    - "storageName"
    - "tenant"
    properties:
      clusterName:
        type: "string"
      copyMethod:
        type: "string"
      desc:
        type: "string"
      displayName:
        type: "string"
      excludePV:
        type: "boolean"
      excludedResources:
        type: "array"
        items:
          type: "string"
      includedResources:
        type: "array"
        items:
          type: "string"
      namespaces:
        type: "array"
        items:
          type: "string"
      policy:
        $ref: "#/definitions/v1alpha1.BackupPolicy"
      storageName:
        type: "string"
      storageRef:
        $ref: "#/definitions/v1alpha1.StorageSpec"
      tenant:
        type: "string"
    example:
      excludePV: true
      storageRef:
        isDefaultStorage: true
        volumeSnapshotProvider: "volumeSnapshotProvider"
        displayName: "displayName"
        s3Config:
          accessKeyId: "accessKeyId"
          bucket: "bucket"
          secretAccessKey: "secretAccessKey"
          s3url: "s3url"
          insecure: true
          credsSecretName: "credsSecretName"
          region: "region"
        volumeSnapshotConfig:
          credsSecretName: "credsSecretName"
          region: "region"
        tenant: "tenant"
        desc: "desc"
        s3Provider: "s3Provider"
      excludedResources:
      - "excludedResources"
      - "excludedResources"
      copyMethod: "copyMethod"
      displayName: "displayName"
      clusterName: "clusterName"
      includedResources:
      - "includedResources"
      - "includedResources"
      tenant: "tenant"
      desc: "desc"
      namespaces:
      - "namespaces"
      - "namespaces"
      policy:
        displayName: "displayName"
        repeat: true
        name: "name"
        retention: 5
        desc: "desc"
        frequency: 1
      storageName: "storageName"
  v1alpha1.BackupPlanStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      currentJobName:
        type: "string"
      currentJobPhase:
        type: "string"
      jobDetail:
        type: "object"
        additionalProperties:
          type: "string"
      phase:
        type: "string"
    example:
      phase: "phase"
      currentJobPhase: "currentJobPhase"
      jobDetail:
        key: "jobDetail"
      currentJobName: "currentJobName"
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1alpha1.BackupPolicy:
    properties:
      desc:
        type: "string"
      displayName:
        type: "string"
      frequency:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      repeat:
        type: "boolean"
      retention:
        type: "integer"
        format: "int32"
    example:
      displayName: "displayName"
      repeat: true
      name: "name"
      retention: 5
      desc: "desc"
      frequency: 1
  v1alpha1.BackupS3Config:
    required:
    - "accessKeyId"
    - "bucket"
    - "s3url"
    - "secretAccessKey"
    properties:
      accessKeyId:
        type: "string"
      bucket:
        type: "string"
      credsSecretName:
        type: "string"
      insecure:
        type: "boolean"
      region:
        type: "string"
      s3url:
        type: "string"
      secretAccessKey:
        type: "string"
    example:
      accessKeyId: "accessKeyId"
      bucket: "bucket"
      secretAccessKey: "secretAccessKey"
      s3url: "s3url"
      insecure: true
      credsSecretName: "credsSecretName"
      region: "region"
  v1alpha1.Cluster:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.ClusterSpec"
      status:
        $ref: "#/definitions/v1alpha1.ClusterStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        storageClasses:
        - default: true
          provisioner: "provisioner"
          name: "name"
          accessModes:
          - "accessModes"
          - "accessModes"
        - default: true
          provisioner: "provisioner"
          name: "name"
          accessModes:
          - "accessModes"
          - "accessModes"
        secretName: "secretName"
        role: "role"
        displayName: "displayName"
        extraParams:
          key: "extraParams"
        serviceAccount: "serviceAccount"
        kubeconfig: "kubeconfig"
        apiEndpoint: "apiEndpoint"
        provider: "provider"
        zone: "zone"
        snapshotClasses:
        - driver: "driver"
          name: "name"
          deletionPolicy: "deletionPolicy"
        - driver: "driver"
          name: "name"
          deletionPolicy: "deletionPolicy"
        excludedNamespaces:
        - "excludedNamespaces"
        - "excludedNamespaces"
        region: "region"
        tenant: "tenant"
        desc: "desc"
      status:
        phase: "phase"
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        version: "version"
  v1alpha1.ClusterList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Cluster"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          storageClasses:
          - default: true
            provisioner: "provisioner"
            name: "name"
            accessModes:
            - "accessModes"
            - "accessModes"
          - default: true
            provisioner: "provisioner"
            name: "name"
            accessModes:
            - "accessModes"
            - "accessModes"
          secretName: "secretName"
          role: "role"
          displayName: "displayName"
          extraParams:
            key: "extraParams"
          serviceAccount: "serviceAccount"
          kubeconfig: "kubeconfig"
          apiEndpoint: "apiEndpoint"
          provider: "provider"
          zone: "zone"
          snapshotClasses:
          - driver: "driver"
            name: "name"
            deletionPolicy: "deletionPolicy"
          - driver: "driver"
            name: "name"
            deletionPolicy: "deletionPolicy"
          excludedNamespaces:
          - "excludedNamespaces"
          - "excludedNamespaces"
          region: "region"
          tenant: "tenant"
          desc: "desc"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          version: "version"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          storageClasses:
          - default: true
            provisioner: "provisioner"
            name: "name"
            accessModes:
            - "accessModes"
            - "accessModes"
          - default: true
            provisioner: "provisioner"
            name: "name"
            accessModes:
            - "accessModes"
            - "accessModes"
          secretName: "secretName"
          role: "role"
          displayName: "displayName"
          extraParams:
            key: "extraParams"
          serviceAccount: "serviceAccount"
          kubeconfig: "kubeconfig"
          apiEndpoint: "apiEndpoint"
          provider: "provider"
          zone: "zone"
          snapshotClasses:
          - driver: "driver"
            name: "name"
            deletionPolicy: "deletionPolicy"
          - driver: "driver"
            name: "name"
            deletionPolicy: "deletionPolicy"
          excludedNamespaces:
          - "excludedNamespaces"
          - "excludedNamespaces"
          region: "region"
          tenant: "tenant"
          desc: "desc"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          version: "version"
  v1alpha1.ClusterSpec:
    required:
    - "kubeconfig"
    - "tenant"
    properties:
      apiEndpoint:
        type: "string"
      desc:
        type: "string"
      displayName:
        type: "string"
      excludedNamespaces:
        type: "array"
        items:
          type: "string"
      extraParams:
        type: "object"
        additionalProperties:
          type: "string"
      kubeconfig:
        type: "string"
      provider:
        type: "string"
      region:
        type: "string"
      role:
        type: "string"
      secretName:
        type: "string"
      serviceAccount:
        type: "string"
      snapshotClasses:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.VolumeSnapshotClass"
      storageClasses:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.StorageClass"
      tenant:
        type: "string"
      zone:
        type: "string"
    example:
      storageClasses:
      - default: true
        provisioner: "provisioner"
        name: "name"
        accessModes:
        - "accessModes"
        - "accessModes"
      - default: true
        provisioner: "provisioner"
        name: "name"
        accessModes:
        - "accessModes"
        - "accessModes"
      secretName: "secretName"
      role: "role"
      displayName: "displayName"
      extraParams:
        key: "extraParams"
      serviceAccount: "serviceAccount"
      kubeconfig: "kubeconfig"
      apiEndpoint: "apiEndpoint"
      provider: "provider"
      zone: "zone"
      snapshotClasses:
      - driver: "driver"
        name: "name"
        deletionPolicy: "deletionPolicy"
      - driver: "driver"
        name: "name"
        deletionPolicy: "deletionPolicy"
      excludedNamespaces:
      - "excludedNamespaces"
      - "excludedNamespaces"
      region: "region"
      tenant: "tenant"
      desc: "desc"
  v1alpha1.ClusterStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      phase:
        type: "string"
      version:
        type: "string"
    example:
      phase: "phase"
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      version: "version"
  v1alpha1.Condition:
    required:
    - "lastHeartbeatTime"
    - "lastTransitionTime"
    - "status"
    - "type"
    properties:
      lastHeartbeatTime:
        type: "string"
        description: "last time we got an update on a given condition"
      lastTransitionTime:
        type: "string"
        description: "last time the condition transit from one status to another"
      message:
        type: "string"
        description: "human-readable message indicating details about last transition"
      reason:
        type: "string"
        description: "one-word CamelCase reason for the condition's last transition"
      status:
        type: "string"
        description: "status of the condition, one of True, False, Unknown"
      type:
        type: "string"
        description: "type of condition."
    example:
      reason: "reason"
      lastHeartbeatTime: "lastHeartbeatTime"
      lastTransitionTime: "lastTransitionTime"
      message: "message"
      type: "type"
      status: "status"
  v1alpha1.RestoreJob:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.RestoreJobSpec"
      status:
        $ref: "#/definitions/v1alpha1.RestoreJobStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        backupJobName: "backupJobName"
        backupJobRef:
          backupPlanRef:
            excludePV: true
            storageRef:
              isDefaultStorage: true
              volumeSnapshotProvider: "volumeSnapshotProvider"
              displayName: "displayName"
              s3Config:
                accessKeyId: "accessKeyId"
                bucket: "bucket"
                secretAccessKey: "secretAccessKey"
                s3url: "s3url"
                insecure: true
                credsSecretName: "credsSecretName"
                region: "region"
              volumeSnapshotConfig:
                credsSecretName: "credsSecretName"
                region: "region"
              tenant: "tenant"
              desc: "desc"
              s3Provider: "s3Provider"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            copyMethod: "copyMethod"
            displayName: "displayName"
            clusterName: "clusterName"
            includedResources:
            - "includedResources"
            - "includedResources"
            tenant: "tenant"
            desc: "desc"
            namespaces:
            - "namespaces"
            - "namespaces"
            policy:
              displayName: "displayName"
              repeat: true
              name: "name"
              retention: 5
              desc: "desc"
              frequency: 1
            storageName: "storageName"
          displayName: "displayName"
          action: "action"
          backupName: "backupName"
          tenant: "tenant"
          desc: "desc"
        displayName: "displayName"
        action: "action"
        restoreName: "restoreName"
        tenant: "tenant"
        desc: "desc"
        restorePlanRef:
          namespaceMappings:
          - "namespaceMappings"
          - "namespaceMappings"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          backupPlanRef:
            excludePV: true
            storageRef:
              isDefaultStorage: true
              volumeSnapshotProvider: "volumeSnapshotProvider"
              displayName: "displayName"
              s3Config:
                accessKeyId: "accessKeyId"
                bucket: "bucket"
                secretAccessKey: "secretAccessKey"
                s3url: "s3url"
                insecure: true
                credsSecretName: "credsSecretName"
                region: "region"
              volumeSnapshotConfig:
                credsSecretName: "credsSecretName"
                region: "region"
              tenant: "tenant"
              desc: "desc"
              s3Provider: "s3Provider"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            copyMethod: "copyMethod"
            displayName: "displayName"
            clusterName: "clusterName"
            includedResources:
            - "includedResources"
            - "includedResources"
            tenant: "tenant"
            desc: "desc"
            namespaces:
            - "namespaces"
            - "namespaces"
            policy:
              displayName: "displayName"
              repeat: true
              name: "name"
              retention: 5
              desc: "desc"
              frequency: 1
            storageName: "storageName"
          displayName: "displayName"
          backupName: "backupName"
          destClusterName: "destClusterName"
          tenant: "tenant"
          desc: "desc"
      status:
        phase: "phase"
        report:
          startTime: "startTime"
          endTime: "endTime"
          totalPVC: 0
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1alpha1.RestoreJobList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.RestoreJob"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          backupJobName: "backupJobName"
          backupJobRef:
            backupPlanRef:
              excludePV: true
              storageRef:
                isDefaultStorage: true
                volumeSnapshotProvider: "volumeSnapshotProvider"
                displayName: "displayName"
                s3Config:
                  accessKeyId: "accessKeyId"
                  bucket: "bucket"
                  secretAccessKey: "secretAccessKey"
                  s3url: "s3url"
                  insecure: true
                  credsSecretName: "credsSecretName"
                  region: "region"
                volumeSnapshotConfig:
                  credsSecretName: "credsSecretName"
                  region: "region"
                tenant: "tenant"
                desc: "desc"
                s3Provider: "s3Provider"
              excludedResources:
              - "excludedResources"
              - "excludedResources"
              copyMethod: "copyMethod"
              displayName: "displayName"
              clusterName: "clusterName"
              includedResources:
              - "includedResources"
              - "includedResources"
              tenant: "tenant"
              desc: "desc"
              namespaces:
              - "namespaces"
              - "namespaces"
              policy:
                displayName: "displayName"
                repeat: true
                name: "name"
                retention: 5
                desc: "desc"
                frequency: 1
              storageName: "storageName"
            displayName: "displayName"
            action: "action"
            backupName: "backupName"
            tenant: "tenant"
            desc: "desc"
          displayName: "displayName"
          action: "action"
          restoreName: "restoreName"
          tenant: "tenant"
          desc: "desc"
          restorePlanRef:
            namespaceMappings:
            - "namespaceMappings"
            - "namespaceMappings"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            backupPlanRef:
              excludePV: true
              storageRef:
                isDefaultStorage: true
                volumeSnapshotProvider: "volumeSnapshotProvider"
                displayName: "displayName"
                s3Config:
                  accessKeyId: "accessKeyId"
                  bucket: "bucket"
                  secretAccessKey: "secretAccessKey"
                  s3url: "s3url"
                  insecure: true
                  credsSecretName: "credsSecretName"
                  region: "region"
                volumeSnapshotConfig:
                  credsSecretName: "credsSecretName"
                  region: "region"
                tenant: "tenant"
                desc: "desc"
                s3Provider: "s3Provider"
              excludedResources:
              - "excludedResources"
              - "excludedResources"
              copyMethod: "copyMethod"
              displayName: "displayName"
              clusterName: "clusterName"
              includedResources:
              - "includedResources"
              - "includedResources"
              tenant: "tenant"
              desc: "desc"
              namespaces:
              - "namespaces"
              - "namespaces"
              policy:
                displayName: "displayName"
                repeat: true
                name: "name"
                retention: 5
                desc: "desc"
                frequency: 1
              storageName: "storageName"
            displayName: "displayName"
            backupName: "backupName"
            destClusterName: "destClusterName"
            tenant: "tenant"
            desc: "desc"
        status:
          phase: "phase"
          report:
            startTime: "startTime"
            endTime: "endTime"
            totalPVC: 0
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          backupJobName: "backupJobName"
          backupJobRef:
            backupPlanRef:
              excludePV: true
              storageRef:
                isDefaultStorage: true
                volumeSnapshotProvider: "volumeSnapshotProvider"
                displayName: "displayName"
                s3Config:
                  accessKeyId: "accessKeyId"
                  bucket: "bucket"
                  secretAccessKey: "secretAccessKey"
                  s3url: "s3url"
                  insecure: true
                  credsSecretName: "credsSecretName"
                  region: "region"
                volumeSnapshotConfig:
                  credsSecretName: "credsSecretName"
                  region: "region"
                tenant: "tenant"
                desc: "desc"
                s3Provider: "s3Provider"
              excludedResources:
              - "excludedResources"
              - "excludedResources"
              copyMethod: "copyMethod"
              displayName: "displayName"
              clusterName: "clusterName"
              includedResources:
              - "includedResources"
              - "includedResources"
              tenant: "tenant"
              desc: "desc"
              namespaces:
              - "namespaces"
              - "namespaces"
              policy:
                displayName: "displayName"
                repeat: true
                name: "name"
                retention: 5
                desc: "desc"
                frequency: 1
              storageName: "storageName"
            displayName: "displayName"
            action: "action"
            backupName: "backupName"
            tenant: "tenant"
            desc: "desc"
          displayName: "displayName"
          action: "action"
          restoreName: "restoreName"
          tenant: "tenant"
          desc: "desc"
          restorePlanRef:
            namespaceMappings:
            - "namespaceMappings"
            - "namespaceMappings"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            backupPlanRef:
              excludePV: true
              storageRef:
                isDefaultStorage: true
                volumeSnapshotProvider: "volumeSnapshotProvider"
                displayName: "displayName"
                s3Config:
                  accessKeyId: "accessKeyId"
                  bucket: "bucket"
                  secretAccessKey: "secretAccessKey"
                  s3url: "s3url"
                  insecure: true
                  credsSecretName: "credsSecretName"
                  region: "region"
                volumeSnapshotConfig:
                  credsSecretName: "credsSecretName"
                  region: "region"
                tenant: "tenant"
                desc: "desc"
                s3Provider: "s3Provider"
              excludedResources:
              - "excludedResources"
              - "excludedResources"
              copyMethod: "copyMethod"
              displayName: "displayName"
              clusterName: "clusterName"
              includedResources:
              - "includedResources"
              - "includedResources"
              tenant: "tenant"
              desc: "desc"
              namespaces:
              - "namespaces"
              - "namespaces"
              policy:
                displayName: "displayName"
                repeat: true
                name: "name"
                retention: 5
                desc: "desc"
                frequency: 1
              storageName: "storageName"
            displayName: "displayName"
            backupName: "backupName"
            destClusterName: "destClusterName"
            tenant: "tenant"
            desc: "desc"
        status:
          phase: "phase"
          report:
            startTime: "startTime"
            endTime: "endTime"
            totalPVC: 0
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1alpha1.RestoreJobReport:
    properties:
      endTime:
        type: "string"
      startTime:
        type: "string"
      totalPVC:
        type: "integer"
        format: "integer"
    example:
      startTime: "startTime"
      endTime: "endTime"
      totalPVC: 0
  v1alpha1.RestoreJobSpec:
    required:
    - "backupJobName"
    - "restoreName"
    - "tenant"
    properties:
      action:
        type: "string"
      backupJobName:
        type: "string"
      backupJobRef:
        $ref: "#/definitions/v1alpha1.BackupJobSpec"
      desc:
        type: "string"
      displayName:
        type: "string"
      restoreName:
        type: "string"
      restorePlanRef:
        $ref: "#/definitions/v1alpha1.RestorePlanSpec"
      tenant:
        type: "string"
    example:
      backupJobName: "backupJobName"
      backupJobRef:
        backupPlanRef:
          excludePV: true
          storageRef:
            isDefaultStorage: true
            volumeSnapshotProvider: "volumeSnapshotProvider"
            displayName: "displayName"
            s3Config:
              accessKeyId: "accessKeyId"
              bucket: "bucket"
              secretAccessKey: "secretAccessKey"
              s3url: "s3url"
              insecure: true
              credsSecretName: "credsSecretName"
              region: "region"
            volumeSnapshotConfig:
              credsSecretName: "credsSecretName"
              region: "region"
            tenant: "tenant"
            desc: "desc"
            s3Provider: "s3Provider"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          copyMethod: "copyMethod"
          displayName: "displayName"
          clusterName: "clusterName"
          includedResources:
          - "includedResources"
          - "includedResources"
          tenant: "tenant"
          desc: "desc"
          namespaces:
          - "namespaces"
          - "namespaces"
          policy:
            displayName: "displayName"
            repeat: true
            name: "name"
            retention: 5
            desc: "desc"
            frequency: 1
          storageName: "storageName"
        displayName: "displayName"
        action: "action"
        backupName: "backupName"
        tenant: "tenant"
        desc: "desc"
      displayName: "displayName"
      action: "action"
      restoreName: "restoreName"
      tenant: "tenant"
      desc: "desc"
      restorePlanRef:
        namespaceMappings:
        - "namespaceMappings"
        - "namespaceMappings"
        excludedResources:
        - "excludedResources"
        - "excludedResources"
        backupPlanRef:
          excludePV: true
          storageRef:
            isDefaultStorage: true
            volumeSnapshotProvider: "volumeSnapshotProvider"
            displayName: "displayName"
            s3Config:
              accessKeyId: "accessKeyId"
              bucket: "bucket"
              secretAccessKey: "secretAccessKey"
              s3url: "s3url"
              insecure: true
              credsSecretName: "credsSecretName"
              region: "region"
            volumeSnapshotConfig:
              credsSecretName: "credsSecretName"
              region: "region"
            tenant: "tenant"
            desc: "desc"
            s3Provider: "s3Provider"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          copyMethod: "copyMethod"
          displayName: "displayName"
          clusterName: "clusterName"
          includedResources:
          - "includedResources"
          - "includedResources"
          tenant: "tenant"
          desc: "desc"
          namespaces:
          - "namespaces"
          - "namespaces"
          policy:
            displayName: "displayName"
            repeat: true
            name: "name"
            retention: 5
            desc: "desc"
            frequency: 1
          storageName: "storageName"
        displayName: "displayName"
        backupName: "backupName"
        destClusterName: "destClusterName"
        tenant: "tenant"
        desc: "desc"
  v1alpha1.RestoreJobStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      phase:
        type: "string"
      report:
        $ref: "#/definitions/v1alpha1.RestoreJobReport"
    example:
      phase: "phase"
      report:
        startTime: "startTime"
        endTime: "endTime"
        totalPVC: 0
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1alpha1.RestorePlan:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.RestorePlanSpec"
      status:
        $ref: "#/definitions/v1alpha1.RestorePlanStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        namespaceMappings:
        - "namespaceMappings"
        - "namespaceMappings"
        excludedResources:
        - "excludedResources"
        - "excludedResources"
        backupPlanRef:
          excludePV: true
          storageRef:
            isDefaultStorage: true
            volumeSnapshotProvider: "volumeSnapshotProvider"
            displayName: "displayName"
            s3Config:
              accessKeyId: "accessKeyId"
              bucket: "bucket"
              secretAccessKey: "secretAccessKey"
              s3url: "s3url"
              insecure: true
              credsSecretName: "credsSecretName"
              region: "region"
            volumeSnapshotConfig:
              credsSecretName: "credsSecretName"
              region: "region"
            tenant: "tenant"
            desc: "desc"
            s3Provider: "s3Provider"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          copyMethod: "copyMethod"
          displayName: "displayName"
          clusterName: "clusterName"
          includedResources:
          - "includedResources"
          - "includedResources"
          tenant: "tenant"
          desc: "desc"
          namespaces:
          - "namespaces"
          - "namespaces"
          policy:
            displayName: "displayName"
            repeat: true
            name: "name"
            retention: 5
            desc: "desc"
            frequency: 1
          storageName: "storageName"
        displayName: "displayName"
        backupName: "backupName"
        destClusterName: "destClusterName"
        tenant: "tenant"
        desc: "desc"
      status:
        phase: "phase"
        currentJobPhase: "currentJobPhase"
        jobDetail:
          key: "jobDetail"
        currentJobName: "currentJobName"
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1alpha1.RestorePlanList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.RestorePlan"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          namespaceMappings:
          - "namespaceMappings"
          - "namespaceMappings"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          backupPlanRef:
            excludePV: true
            storageRef:
              isDefaultStorage: true
              volumeSnapshotProvider: "volumeSnapshotProvider"
              displayName: "displayName"
              s3Config:
                accessKeyId: "accessKeyId"
                bucket: "bucket"
                secretAccessKey: "secretAccessKey"
                s3url: "s3url"
                insecure: true
                credsSecretName: "credsSecretName"
                region: "region"
              volumeSnapshotConfig:
                credsSecretName: "credsSecretName"
                region: "region"
              tenant: "tenant"
              desc: "desc"
              s3Provider: "s3Provider"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            copyMethod: "copyMethod"
            displayName: "displayName"
            clusterName: "clusterName"
            includedResources:
            - "includedResources"
            - "includedResources"
            tenant: "tenant"
            desc: "desc"
            namespaces:
            - "namespaces"
            - "namespaces"
            policy:
              displayName: "displayName"
              repeat: true
              name: "name"
              retention: 5
              desc: "desc"
              frequency: 1
            storageName: "storageName"
          displayName: "displayName"
          backupName: "backupName"
          destClusterName: "destClusterName"
          tenant: "tenant"
          desc: "desc"
        status:
          phase: "phase"
          currentJobPhase: "currentJobPhase"
          jobDetail:
            key: "jobDetail"
          currentJobName: "currentJobName"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          namespaceMappings:
          - "namespaceMappings"
          - "namespaceMappings"
          excludedResources:
          - "excludedResources"
          - "excludedResources"
          backupPlanRef:
            excludePV: true
            storageRef:
              isDefaultStorage: true
              volumeSnapshotProvider: "volumeSnapshotProvider"
              displayName: "displayName"
              s3Config:
                accessKeyId: "accessKeyId"
                bucket: "bucket"
                secretAccessKey: "secretAccessKey"
                s3url: "s3url"
                insecure: true
                credsSecretName: "credsSecretName"
                region: "region"
              volumeSnapshotConfig:
                credsSecretName: "credsSecretName"
                region: "region"
              tenant: "tenant"
              desc: "desc"
              s3Provider: "s3Provider"
            excludedResources:
            - "excludedResources"
            - "excludedResources"
            copyMethod: "copyMethod"
            displayName: "displayName"
            clusterName: "clusterName"
            includedResources:
            - "includedResources"
            - "includedResources"
            tenant: "tenant"
            desc: "desc"
            namespaces:
            - "namespaces"
            - "namespaces"
            policy:
              displayName: "displayName"
              repeat: true
              name: "name"
              retention: 5
              desc: "desc"
              frequency: 1
            storageName: "storageName"
          displayName: "displayName"
          backupName: "backupName"
          destClusterName: "destClusterName"
          tenant: "tenant"
          desc: "desc"
        status:
          phase: "phase"
          currentJobPhase: "currentJobPhase"
          jobDetail:
            key: "jobDetail"
          currentJobName: "currentJobName"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1alpha1.RestorePlanSpec:
    required:
    - "backupName"
    - "destClusterName"
    - "tenant"
    properties:
      backupName:
        type: "string"
      backupPlanRef:
        $ref: "#/definitions/v1alpha1.BackupPlanSpec"
      desc:
        type: "string"
      destClusterName:
        type: "string"
      displayName:
        type: "string"
      excludedResources:
        type: "array"
        items:
          type: "string"
      namespaceMappings:
        type: "array"
        items:
          type: "string"
      tenant:
        type: "string"
    example:
      namespaceMappings:
      - "namespaceMappings"
      - "namespaceMappings"
      excludedResources:
      - "excludedResources"
      - "excludedResources"
      backupPlanRef:
        excludePV: true
        storageRef:
          isDefaultStorage: true
          volumeSnapshotProvider: "volumeSnapshotProvider"
          displayName: "displayName"
          s3Config:
            accessKeyId: "accessKeyId"
            bucket: "bucket"
            secretAccessKey: "secretAccessKey"
            s3url: "s3url"
            insecure: true
            credsSecretName: "credsSecretName"
            region: "region"
          volumeSnapshotConfig:
            credsSecretName: "credsSecretName"
            region: "region"
          tenant: "tenant"
          desc: "desc"
          s3Provider: "s3Provider"
        excludedResources:
        - "excludedResources"
        - "excludedResources"
        copyMethod: "copyMethod"
        displayName: "displayName"
        clusterName: "clusterName"
        includedResources:
        - "includedResources"
        - "includedResources"
        tenant: "tenant"
        desc: "desc"
        namespaces:
        - "namespaces"
        - "namespaces"
        policy:
          displayName: "displayName"
          repeat: true
          name: "name"
          retention: 5
          desc: "desc"
          frequency: 1
        storageName: "storageName"
      displayName: "displayName"
      backupName: "backupName"
      destClusterName: "destClusterName"
      tenant: "tenant"
      desc: "desc"
  v1alpha1.RestorePlanStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      currentJobName:
        type: "string"
      currentJobPhase:
        type: "string"
      jobDetail:
        type: "object"
        additionalProperties:
          type: "string"
      phase:
        type: "string"
    example:
      phase: "phase"
      currentJobPhase: "currentJobPhase"
      jobDetail:
        key: "jobDetail"
      currentJobName: "currentJobName"
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1alpha1.Storage:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.StorageSpec"
      status:
        $ref: "#/definitions/v1alpha1.StorageStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        isDefaultStorage: true
        volumeSnapshotProvider: "volumeSnapshotProvider"
        displayName: "displayName"
        s3Config:
          accessKeyId: "accessKeyId"
          bucket: "bucket"
          secretAccessKey: "secretAccessKey"
          s3url: "s3url"
          insecure: true
          credsSecretName: "credsSecretName"
          region: "region"
        volumeSnapshotConfig:
          credsSecretName: "credsSecretName"
          region: "region"
        tenant: "tenant"
        desc: "desc"
        s3Provider: "s3Provider"
      status:
        phase: "phase"
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1alpha1.StorageClass:
    properties:
      accessModes:
        type: "array"
        items:
          type: "string"
      default:
        type: "boolean"
      name:
        type: "string"
      provisioner:
        type: "string"
    example:
      default: true
      provisioner: "provisioner"
      name: "name"
      accessModes:
      - "accessModes"
      - "accessModes"
  v1alpha1.StorageList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Storage"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          isDefaultStorage: true
          volumeSnapshotProvider: "volumeSnapshotProvider"
          displayName: "displayName"
          s3Config:
            accessKeyId: "accessKeyId"
            bucket: "bucket"
            secretAccessKey: "secretAccessKey"
            s3url: "s3url"
            insecure: true
            credsSecretName: "credsSecretName"
            region: "region"
          volumeSnapshotConfig:
            credsSecretName: "credsSecretName"
            region: "region"
          tenant: "tenant"
          desc: "desc"
          s3Provider: "s3Provider"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          isDefaultStorage: true
          volumeSnapshotProvider: "volumeSnapshotProvider"
          displayName: "displayName"
          s3Config:
            accessKeyId: "accessKeyId"
            bucket: "bucket"
            secretAccessKey: "secretAccessKey"
            s3url: "s3url"
            insecure: true
            credsSecretName: "credsSecretName"
            region: "region"
          volumeSnapshotConfig:
            credsSecretName: "credsSecretName"
            region: "region"
          tenant: "tenant"
          desc: "desc"
          s3Provider: "s3Provider"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1alpha1.StorageSpec:
    required:
    - "tenant"
    properties:
      desc:
        type: "string"
      displayName:
        type: "string"
      isDefaultStorage:
        type: "boolean"
      s3Config:
        $ref: "#/definitions/v1alpha1.BackupS3Config"
      s3Provider:
        type: "string"
      tenant:
        type: "string"
      volumeSnapshotConfig:
        $ref: "#/definitions/v1alpha1.VolumeSnapshotConfig"
      volumeSnapshotProvider:
        type: "string"
    example:
      isDefaultStorage: true
      volumeSnapshotProvider: "volumeSnapshotProvider"
      displayName: "displayName"
      s3Config:
        accessKeyId: "accessKeyId"
        bucket: "bucket"
        secretAccessKey: "secretAccessKey"
        s3url: "s3url"
        insecure: true
        credsSecretName: "credsSecretName"
        region: "region"
      volumeSnapshotConfig:
        credsSecretName: "credsSecretName"
        region: "region"
      tenant: "tenant"
      desc: "desc"
      s3Provider: "s3Provider"
  v1alpha1.StorageStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      phase:
        type: "string"
    example:
      phase: "phase"
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1alpha1.Tenant:
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1.TenantSpec"
      status:
        $ref: "#/definitions/v1alpha1.TenantStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp: "deletionTimestamp"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: "fieldsV1"
          manager: "manager"
          time: "time"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: "creationTimestamp"
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        orgName: "orgName"
        displayName: "displayName"
        contact: "contact"
        defaultBackupStorage: "defaultBackupStorage"
        desc: "desc"
      status:
        phase: "phase"
        conditions:
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          lastHeartbeatTime: "lastHeartbeatTime"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          status: "status"
  v1alpha1.TenantList:
    required:
    - "items"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Tenant"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 5
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          orgName: "orgName"
          displayName: "displayName"
          contact: "contact"
          defaultBackupStorage: "defaultBackupStorage"
          desc: "desc"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp: "deletionTimestamp"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: "fieldsV1"
            manager: "manager"
            time: "time"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: "creationTimestamp"
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          orgName: "orgName"
          displayName: "displayName"
          contact: "contact"
          defaultBackupStorage: "defaultBackupStorage"
          desc: "desc"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            lastHeartbeatTime: "lastHeartbeatTime"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            status: "status"
  v1alpha1.TenantSpec:
    properties:
      contact:
        type: "string"
      defaultBackupStorage:
        type: "string"
      desc:
        type: "string"
      displayName:
        type: "string"
      orgName:
        type: "string"
    example:
      orgName: "orgName"
      displayName: "displayName"
      contact: "contact"
      defaultBackupStorage: "defaultBackupStorage"
      desc: "desc"
  v1alpha1.TenantStatus:
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1.Condition"
      phase:
        type: "string"
    example:
      phase: "phase"
      conditions:
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        lastHeartbeatTime: "lastHeartbeatTime"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        status: "status"
  v1alpha1.VolumeSnapshotClass:
    required:
    - "deletionPolicy"
    - "driver"
    - "name"
    properties:
      deletionPolicy:
        type: "string"
      driver:
        type: "string"
      name:
        type: "string"
    example:
      driver: "driver"
      name: "name"
      deletionPolicy: "deletionPolicy"
  v1alpha1.VolumeSnapshotConfig:
    properties:
      credsSecretName:
        type: "string"
      region:
        type: "string"
    example:
      credsSecretName: "credsSecretName"
      region: "region"
  ysapi.Error:
    properties:
      code:
        type: "string"
        description: "error code"
      message:
        type: "string"
        description: "error message"
      origError:
        type: "string"
        description: "error that caused this error"
      statusCode:
        type: "integer"
        format: "int32"
        description: "http status code"
    example:
      origError: "origError"
      code: "code"
      message: "message"
      statusCode: 0
